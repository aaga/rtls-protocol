// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Trackable.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RTLSProtocol_Trackable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ID unique to device; could be unknown (-1)
  var id: Int32 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// unique 128-bit ID used only for tracking
  var cuid: Data {
    get {return _storage._cuid}
    set {_uniqueStorage()._cuid = newValue}
  }

  /// e.g. Serial Number
  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var frameID: UInt64 {
    get {return _storage._frameID}
    set {_uniqueStorage()._frameID = newValue}
  }

  /// Unix timestamp in milliseconds
  var timestamp: UInt64 {
    get {return _storage._timestamp}
    set {_uniqueStorage()._timestamp = newValue}
  }

  /// variable length field for any extra information
  var context: Data {
    get {return _storage._context}
    set {_uniqueStorage()._context = newValue}
  }

  var position: RTLSProtocol_Trackable.Position {
    get {return _storage._position ?? RTLSProtocol_Trackable.Position()}
    set {_uniqueStorage()._position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  var hasPosition: Bool {return _storage._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  mutating func clearPosition() {_uniqueStorage()._position = nil}

  var orientation: RTLSProtocol_Trackable.Orientation {
    get {return _storage._orientation ?? RTLSProtocol_Trackable.Orientation()}
    set {_uniqueStorage()._orientation = newValue}
  }
  /// Returns true if `orientation` has been explicitly set.
  var hasOrientation: Bool {return _storage._orientation != nil}
  /// Clears the value of `orientation`. Subsequent reads from it will return its default value.
  mutating func clearOrientation() {_uniqueStorage()._orientation = nil}

  var velocity: RTLSProtocol_Trackable.Velocity {
    get {return _storage._velocity ?? RTLSProtocol_Trackable.Velocity()}
    set {_uniqueStorage()._velocity = newValue}
  }
  /// Returns true if `velocity` has been explicitly set.
  var hasVelocity: Bool {return _storage._velocity != nil}
  /// Clears the value of `velocity`. Subsequent reads from it will return its default value.
  mutating func clearVelocity() {_uniqueStorage()._velocity = nil}

  var acceleration: RTLSProtocol_Trackable.Acceleration {
    get {return _storage._acceleration ?? RTLSProtocol_Trackable.Acceleration()}
    set {_uniqueStorage()._acceleration = newValue}
  }
  /// Returns true if `acceleration` has been explicitly set.
  var hasAcceleration: Bool {return _storage._acceleration != nil}
  /// Clears the value of `acceleration`. Subsequent reads from it will return its default value.
  mutating func clearAcceleration() {_uniqueStorage()._acceleration = nil}

  var angularVelocity: RTLSProtocol_Trackable.AngularVelocity {
    get {return _storage._angularVelocity ?? RTLSProtocol_Trackable.AngularVelocity()}
    set {_uniqueStorage()._angularVelocity = newValue}
  }
  /// Returns true if `angularVelocity` has been explicitly set.
  var hasAngularVelocity: Bool {return _storage._angularVelocity != nil}
  /// Clears the value of `angularVelocity`. Subsequent reads from it will return its default value.
  mutating func clearAngularVelocity() {_uniqueStorage()._angularVelocity = nil}

  var angularAcceleration: RTLSProtocol_Trackable.AngularAcceleration {
    get {return _storage._angularAcceleration ?? RTLSProtocol_Trackable.AngularAcceleration()}
    set {_uniqueStorage()._angularAcceleration = newValue}
  }
  /// Returns true if `angularAcceleration` has been explicitly set.
  var hasAngularAcceleration: Bool {return _storage._angularAcceleration != nil}
  /// Clears the value of `angularAcceleration`. Subsequent reads from it will return its default value.
  mutating func clearAngularAcceleration() {_uniqueStorage()._angularAcceleration = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Position {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var x: Double = 0

    var y: Double = 0

    var z: Double = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Orientation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var x: Double = 0

    var y: Double = 0

    var z: Double = 0

    var w: Double = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Velocity {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var x: Float = 0

    var y: Float = 0

    var z: Float = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Acceleration {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var x: Float = 0

    var y: Float = 0

    var z: Float = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct AngularVelocity {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var x: Float = 0

    var y: Float = 0

    var z: Float = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct AngularAcceleration {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var x: Float = 0

    var y: Float = 0

    var z: Float = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct RTLSProtocol_TrackableFrame {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var frameID: UInt64 = 0

  var timestamp: UInt64 = 0

  var trackables: [RTLSProtocol_Trackable] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "RTLSProtocol"

extension RTLSProtocol_Trackable: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Trackable"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "cuid"),
    3: .same(proto: "name"),
    10: .standard(proto: "frame_ID"),
    11: .same(proto: "timestamp"),
    12: .same(proto: "context"),
    4: .same(proto: "position"),
    5: .same(proto: "orientation"),
    6: .same(proto: "velocity"),
    7: .same(proto: "acceleration"),
    8: .standard(proto: "angular_velocity"),
    9: .standard(proto: "angular_acceleration"),
  ]

  fileprivate class _StorageClass {
    var _id: Int32 = 0
    var _cuid: Data = SwiftProtobuf.Internal.emptyData
    var _name: String = String()
    var _frameID: UInt64 = 0
    var _timestamp: UInt64 = 0
    var _context: Data = SwiftProtobuf.Internal.emptyData
    var _position: RTLSProtocol_Trackable.Position? = nil
    var _orientation: RTLSProtocol_Trackable.Orientation? = nil
    var _velocity: RTLSProtocol_Trackable.Velocity? = nil
    var _acceleration: RTLSProtocol_Trackable.Acceleration? = nil
    var _angularVelocity: RTLSProtocol_Trackable.AngularVelocity? = nil
    var _angularAcceleration: RTLSProtocol_Trackable.AngularAcceleration? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _cuid = source._cuid
      _name = source._name
      _frameID = source._frameID
      _timestamp = source._timestamp
      _context = source._context
      _position = source._position
      _orientation = source._orientation
      _velocity = source._velocity
      _acceleration = source._acceleration
      _angularVelocity = source._angularVelocity
      _angularAcceleration = source._angularAcceleration
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._id)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._cuid)
        case 3: try decoder.decodeSingularStringField(value: &_storage._name)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._position)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._orientation)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._velocity)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._acceleration)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._angularVelocity)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._angularAcceleration)
        case 10: try decoder.decodeSingularUInt64Field(value: &_storage._frameID)
        case 11: try decoder.decodeSingularUInt64Field(value: &_storage._timestamp)
        case 12: try decoder.decodeSingularBytesField(value: &_storage._context)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt32Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._cuid.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._cuid, fieldNumber: 2)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 3)
      }
      if let v = _storage._position {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._orientation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._velocity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._acceleration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._angularVelocity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._angularAcceleration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if _storage._frameID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._frameID, fieldNumber: 10)
      }
      if _storage._timestamp != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._timestamp, fieldNumber: 11)
      }
      if !_storage._context.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._context, fieldNumber: 12)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RTLSProtocol_Trackable, rhs: RTLSProtocol_Trackable) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._cuid != rhs_storage._cuid {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._frameID != rhs_storage._frameID {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        if _storage._context != rhs_storage._context {return false}
        if _storage._position != rhs_storage._position {return false}
        if _storage._orientation != rhs_storage._orientation {return false}
        if _storage._velocity != rhs_storage._velocity {return false}
        if _storage._acceleration != rhs_storage._acceleration {return false}
        if _storage._angularVelocity != rhs_storage._angularVelocity {return false}
        if _storage._angularAcceleration != rhs_storage._angularAcceleration {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RTLSProtocol_Trackable.Position: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RTLSProtocol_Trackable.protoMessageName + ".Position"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "z"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.x)
      case 2: try decoder.decodeSingularDoubleField(value: &self.y)
      case 3: try decoder.decodeSingularDoubleField(value: &self.z)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x != 0 {
      try visitor.visitSingularDoubleField(value: self.x, fieldNumber: 1)
    }
    if self.y != 0 {
      try visitor.visitSingularDoubleField(value: self.y, fieldNumber: 2)
    }
    if self.z != 0 {
      try visitor.visitSingularDoubleField(value: self.z, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RTLSProtocol_Trackable.Position, rhs: RTLSProtocol_Trackable.Position) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.z != rhs.z {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RTLSProtocol_Trackable.Orientation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RTLSProtocol_Trackable.protoMessageName + ".Orientation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "z"),
    4: .same(proto: "w"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.x)
      case 2: try decoder.decodeSingularDoubleField(value: &self.y)
      case 3: try decoder.decodeSingularDoubleField(value: &self.z)
      case 4: try decoder.decodeSingularDoubleField(value: &self.w)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x != 0 {
      try visitor.visitSingularDoubleField(value: self.x, fieldNumber: 1)
    }
    if self.y != 0 {
      try visitor.visitSingularDoubleField(value: self.y, fieldNumber: 2)
    }
    if self.z != 0 {
      try visitor.visitSingularDoubleField(value: self.z, fieldNumber: 3)
    }
    if self.w != 0 {
      try visitor.visitSingularDoubleField(value: self.w, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RTLSProtocol_Trackable.Orientation, rhs: RTLSProtocol_Trackable.Orientation) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.z != rhs.z {return false}
    if lhs.w != rhs.w {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RTLSProtocol_Trackable.Velocity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RTLSProtocol_Trackable.protoMessageName + ".Velocity"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "z"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.x)
      case 2: try decoder.decodeSingularFloatField(value: &self.y)
      case 3: try decoder.decodeSingularFloatField(value: &self.z)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x != 0 {
      try visitor.visitSingularFloatField(value: self.x, fieldNumber: 1)
    }
    if self.y != 0 {
      try visitor.visitSingularFloatField(value: self.y, fieldNumber: 2)
    }
    if self.z != 0 {
      try visitor.visitSingularFloatField(value: self.z, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RTLSProtocol_Trackable.Velocity, rhs: RTLSProtocol_Trackable.Velocity) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.z != rhs.z {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RTLSProtocol_Trackable.Acceleration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RTLSProtocol_Trackable.protoMessageName + ".Acceleration"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "z"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.x)
      case 2: try decoder.decodeSingularFloatField(value: &self.y)
      case 3: try decoder.decodeSingularFloatField(value: &self.z)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x != 0 {
      try visitor.visitSingularFloatField(value: self.x, fieldNumber: 1)
    }
    if self.y != 0 {
      try visitor.visitSingularFloatField(value: self.y, fieldNumber: 2)
    }
    if self.z != 0 {
      try visitor.visitSingularFloatField(value: self.z, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RTLSProtocol_Trackable.Acceleration, rhs: RTLSProtocol_Trackable.Acceleration) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.z != rhs.z {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RTLSProtocol_Trackable.AngularVelocity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RTLSProtocol_Trackable.protoMessageName + ".AngularVelocity"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "z"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.x)
      case 2: try decoder.decodeSingularFloatField(value: &self.y)
      case 3: try decoder.decodeSingularFloatField(value: &self.z)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x != 0 {
      try visitor.visitSingularFloatField(value: self.x, fieldNumber: 1)
    }
    if self.y != 0 {
      try visitor.visitSingularFloatField(value: self.y, fieldNumber: 2)
    }
    if self.z != 0 {
      try visitor.visitSingularFloatField(value: self.z, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RTLSProtocol_Trackable.AngularVelocity, rhs: RTLSProtocol_Trackable.AngularVelocity) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.z != rhs.z {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RTLSProtocol_Trackable.AngularAcceleration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RTLSProtocol_Trackable.protoMessageName + ".AngularAcceleration"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "z"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.x)
      case 2: try decoder.decodeSingularFloatField(value: &self.y)
      case 3: try decoder.decodeSingularFloatField(value: &self.z)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x != 0 {
      try visitor.visitSingularFloatField(value: self.x, fieldNumber: 1)
    }
    if self.y != 0 {
      try visitor.visitSingularFloatField(value: self.y, fieldNumber: 2)
    }
    if self.z != 0 {
      try visitor.visitSingularFloatField(value: self.z, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RTLSProtocol_Trackable.AngularAcceleration, rhs: RTLSProtocol_Trackable.AngularAcceleration) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.z != rhs.z {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RTLSProtocol_TrackableFrame: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TrackableFrame"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "frame_ID"),
    2: .same(proto: "timestamp"),
    3: .same(proto: "trackables"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.frameID)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.timestamp)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.trackables)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.frameID != 0 {
      try visitor.visitSingularUInt64Field(value: self.frameID, fieldNumber: 1)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestamp, fieldNumber: 2)
    }
    if !self.trackables.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.trackables, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RTLSProtocol_TrackableFrame, rhs: RTLSProtocol_TrackableFrame) -> Bool {
    if lhs.frameID != rhs.frameID {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.trackables != rhs.trackables {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
