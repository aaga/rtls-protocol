// source: Trackable.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.RTLSProtocol.Trackable', null, global);
goog.exportSymbol('proto.RTLSProtocol.Trackable.Acceleration', null, global);
goog.exportSymbol('proto.RTLSProtocol.Trackable.AngularAcceleration', null, global);
goog.exportSymbol('proto.RTLSProtocol.Trackable.AngularVelocity', null, global);
goog.exportSymbol('proto.RTLSProtocol.Trackable.Orientation', null, global);
goog.exportSymbol('proto.RTLSProtocol.Trackable.Position', null, global);
goog.exportSymbol('proto.RTLSProtocol.Trackable.Velocity', null, global);
goog.exportSymbol('proto.RTLSProtocol.TrackableFrame', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RTLSProtocol.Trackable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.RTLSProtocol.Trackable.repeatedFields_, null);
};
goog.inherits(proto.RTLSProtocol.Trackable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RTLSProtocol.Trackable.displayName = 'proto.RTLSProtocol.Trackable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RTLSProtocol.Trackable.Position = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RTLSProtocol.Trackable.Position, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RTLSProtocol.Trackable.Position.displayName = 'proto.RTLSProtocol.Trackable.Position';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RTLSProtocol.Trackable.Orientation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RTLSProtocol.Trackable.Orientation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RTLSProtocol.Trackable.Orientation.displayName = 'proto.RTLSProtocol.Trackable.Orientation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RTLSProtocol.Trackable.Velocity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RTLSProtocol.Trackable.Velocity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RTLSProtocol.Trackable.Velocity.displayName = 'proto.RTLSProtocol.Trackable.Velocity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RTLSProtocol.Trackable.Acceleration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RTLSProtocol.Trackable.Acceleration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RTLSProtocol.Trackable.Acceleration.displayName = 'proto.RTLSProtocol.Trackable.Acceleration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RTLSProtocol.Trackable.AngularVelocity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RTLSProtocol.Trackable.AngularVelocity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RTLSProtocol.Trackable.AngularVelocity.displayName = 'proto.RTLSProtocol.Trackable.AngularVelocity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RTLSProtocol.Trackable.AngularAcceleration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RTLSProtocol.Trackable.AngularAcceleration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RTLSProtocol.Trackable.AngularAcceleration.displayName = 'proto.RTLSProtocol.Trackable.AngularAcceleration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RTLSProtocol.TrackableFrame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.RTLSProtocol.TrackableFrame.repeatedFields_, null);
};
goog.inherits(proto.RTLSProtocol.TrackableFrame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RTLSProtocol.TrackableFrame.displayName = 'proto.RTLSProtocol.TrackableFrame';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.RTLSProtocol.Trackable.repeatedFields_ = [13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RTLSProtocol.Trackable.prototype.toObject = function(opt_includeInstance) {
  return proto.RTLSProtocol.Trackable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RTLSProtocol.Trackable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RTLSProtocol.Trackable.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cuid: msg.getCuid_asB64(),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    frameId: jspb.Message.getFieldWithDefault(msg, 10, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 11, 0),
    context: msg.getContext_asB64(),
    childrenList: jspb.Message.toObjectList(msg.getChildrenList(),
    proto.RTLSProtocol.Trackable.toObject, includeInstance),
    position: (f = msg.getPosition()) && proto.RTLSProtocol.Trackable.Position.toObject(includeInstance, f),
    orientation: (f = msg.getOrientation()) && proto.RTLSProtocol.Trackable.Orientation.toObject(includeInstance, f),
    velocity: (f = msg.getVelocity()) && proto.RTLSProtocol.Trackable.Velocity.toObject(includeInstance, f),
    acceleration: (f = msg.getAcceleration()) && proto.RTLSProtocol.Trackable.Acceleration.toObject(includeInstance, f),
    angularVelocity: (f = msg.getAngularVelocity()) && proto.RTLSProtocol.Trackable.AngularVelocity.toObject(includeInstance, f),
    angularAcceleration: (f = msg.getAngularAcceleration()) && proto.RTLSProtocol.Trackable.AngularAcceleration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RTLSProtocol.Trackable}
 */
proto.RTLSProtocol.Trackable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RTLSProtocol.Trackable;
  return proto.RTLSProtocol.Trackable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RTLSProtocol.Trackable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RTLSProtocol.Trackable}
 */
proto.RTLSProtocol.Trackable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFrameId(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContext(value);
      break;
    case 13:
      var value = new proto.RTLSProtocol.Trackable;
      reader.readMessage(value,proto.RTLSProtocol.Trackable.deserializeBinaryFromReader);
      msg.addChildren(value);
      break;
    case 4:
      var value = new proto.RTLSProtocol.Trackable.Position;
      reader.readMessage(value,proto.RTLSProtocol.Trackable.Position.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 5:
      var value = new proto.RTLSProtocol.Trackable.Orientation;
      reader.readMessage(value,proto.RTLSProtocol.Trackable.Orientation.deserializeBinaryFromReader);
      msg.setOrientation(value);
      break;
    case 6:
      var value = new proto.RTLSProtocol.Trackable.Velocity;
      reader.readMessage(value,proto.RTLSProtocol.Trackable.Velocity.deserializeBinaryFromReader);
      msg.setVelocity(value);
      break;
    case 7:
      var value = new proto.RTLSProtocol.Trackable.Acceleration;
      reader.readMessage(value,proto.RTLSProtocol.Trackable.Acceleration.deserializeBinaryFromReader);
      msg.setAcceleration(value);
      break;
    case 8:
      var value = new proto.RTLSProtocol.Trackable.AngularVelocity;
      reader.readMessage(value,proto.RTLSProtocol.Trackable.AngularVelocity.deserializeBinaryFromReader);
      msg.setAngularVelocity(value);
      break;
    case 9:
      var value = new proto.RTLSProtocol.Trackable.AngularAcceleration;
      reader.readMessage(value,proto.RTLSProtocol.Trackable.AngularAcceleration.deserializeBinaryFromReader);
      msg.setAngularAcceleration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RTLSProtocol.Trackable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RTLSProtocol.Trackable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RTLSProtocol.Trackable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RTLSProtocol.Trackable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCuid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFrameId();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getContext_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = message.getChildrenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.RTLSProtocol.Trackable.serializeBinaryToWriter
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.RTLSProtocol.Trackable.Position.serializeBinaryToWriter
    );
  }
  f = message.getOrientation();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.RTLSProtocol.Trackable.Orientation.serializeBinaryToWriter
    );
  }
  f = message.getVelocity();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.RTLSProtocol.Trackable.Velocity.serializeBinaryToWriter
    );
  }
  f = message.getAcceleration();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.RTLSProtocol.Trackable.Acceleration.serializeBinaryToWriter
    );
  }
  f = message.getAngularVelocity();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.RTLSProtocol.Trackable.AngularVelocity.serializeBinaryToWriter
    );
  }
  f = message.getAngularAcceleration();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.RTLSProtocol.Trackable.AngularAcceleration.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RTLSProtocol.Trackable.Position.prototype.toObject = function(opt_includeInstance) {
  return proto.RTLSProtocol.Trackable.Position.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RTLSProtocol.Trackable.Position} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RTLSProtocol.Trackable.Position.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RTLSProtocol.Trackable.Position}
 */
proto.RTLSProtocol.Trackable.Position.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RTLSProtocol.Trackable.Position;
  return proto.RTLSProtocol.Trackable.Position.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RTLSProtocol.Trackable.Position} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RTLSProtocol.Trackable.Position}
 */
proto.RTLSProtocol.Trackable.Position.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RTLSProtocol.Trackable.Position.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RTLSProtocol.Trackable.Position.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RTLSProtocol.Trackable.Position} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RTLSProtocol.Trackable.Position.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.RTLSProtocol.Trackable.Position.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RTLSProtocol.Trackable.Position} returns this
 */
proto.RTLSProtocol.Trackable.Position.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.RTLSProtocol.Trackable.Position.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RTLSProtocol.Trackable.Position} returns this
 */
proto.RTLSProtocol.Trackable.Position.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double z = 3;
 * @return {number}
 */
proto.RTLSProtocol.Trackable.Position.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RTLSProtocol.Trackable.Position} returns this
 */
proto.RTLSProtocol.Trackable.Position.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RTLSProtocol.Trackable.Orientation.prototype.toObject = function(opt_includeInstance) {
  return proto.RTLSProtocol.Trackable.Orientation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RTLSProtocol.Trackable.Orientation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RTLSProtocol.Trackable.Orientation.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    w: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RTLSProtocol.Trackable.Orientation}
 */
proto.RTLSProtocol.Trackable.Orientation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RTLSProtocol.Trackable.Orientation;
  return proto.RTLSProtocol.Trackable.Orientation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RTLSProtocol.Trackable.Orientation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RTLSProtocol.Trackable.Orientation}
 */
proto.RTLSProtocol.Trackable.Orientation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setW(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RTLSProtocol.Trackable.Orientation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RTLSProtocol.Trackable.Orientation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RTLSProtocol.Trackable.Orientation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RTLSProtocol.Trackable.Orientation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getW();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.RTLSProtocol.Trackable.Orientation.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RTLSProtocol.Trackable.Orientation} returns this
 */
proto.RTLSProtocol.Trackable.Orientation.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.RTLSProtocol.Trackable.Orientation.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RTLSProtocol.Trackable.Orientation} returns this
 */
proto.RTLSProtocol.Trackable.Orientation.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double z = 3;
 * @return {number}
 */
proto.RTLSProtocol.Trackable.Orientation.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RTLSProtocol.Trackable.Orientation} returns this
 */
proto.RTLSProtocol.Trackable.Orientation.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double w = 4;
 * @return {number}
 */
proto.RTLSProtocol.Trackable.Orientation.prototype.getW = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RTLSProtocol.Trackable.Orientation} returns this
 */
proto.RTLSProtocol.Trackable.Orientation.prototype.setW = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RTLSProtocol.Trackable.Velocity.prototype.toObject = function(opt_includeInstance) {
  return proto.RTLSProtocol.Trackable.Velocity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RTLSProtocol.Trackable.Velocity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RTLSProtocol.Trackable.Velocity.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RTLSProtocol.Trackable.Velocity}
 */
proto.RTLSProtocol.Trackable.Velocity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RTLSProtocol.Trackable.Velocity;
  return proto.RTLSProtocol.Trackable.Velocity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RTLSProtocol.Trackable.Velocity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RTLSProtocol.Trackable.Velocity}
 */
proto.RTLSProtocol.Trackable.Velocity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RTLSProtocol.Trackable.Velocity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RTLSProtocol.Trackable.Velocity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RTLSProtocol.Trackable.Velocity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RTLSProtocol.Trackable.Velocity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.RTLSProtocol.Trackable.Velocity.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RTLSProtocol.Trackable.Velocity} returns this
 */
proto.RTLSProtocol.Trackable.Velocity.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.RTLSProtocol.Trackable.Velocity.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RTLSProtocol.Trackable.Velocity} returns this
 */
proto.RTLSProtocol.Trackable.Velocity.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float z = 3;
 * @return {number}
 */
proto.RTLSProtocol.Trackable.Velocity.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RTLSProtocol.Trackable.Velocity} returns this
 */
proto.RTLSProtocol.Trackable.Velocity.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RTLSProtocol.Trackable.Acceleration.prototype.toObject = function(opt_includeInstance) {
  return proto.RTLSProtocol.Trackable.Acceleration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RTLSProtocol.Trackable.Acceleration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RTLSProtocol.Trackable.Acceleration.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RTLSProtocol.Trackable.Acceleration}
 */
proto.RTLSProtocol.Trackable.Acceleration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RTLSProtocol.Trackable.Acceleration;
  return proto.RTLSProtocol.Trackable.Acceleration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RTLSProtocol.Trackable.Acceleration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RTLSProtocol.Trackable.Acceleration}
 */
proto.RTLSProtocol.Trackable.Acceleration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RTLSProtocol.Trackable.Acceleration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RTLSProtocol.Trackable.Acceleration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RTLSProtocol.Trackable.Acceleration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RTLSProtocol.Trackable.Acceleration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.RTLSProtocol.Trackable.Acceleration.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RTLSProtocol.Trackable.Acceleration} returns this
 */
proto.RTLSProtocol.Trackable.Acceleration.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.RTLSProtocol.Trackable.Acceleration.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RTLSProtocol.Trackable.Acceleration} returns this
 */
proto.RTLSProtocol.Trackable.Acceleration.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float z = 3;
 * @return {number}
 */
proto.RTLSProtocol.Trackable.Acceleration.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RTLSProtocol.Trackable.Acceleration} returns this
 */
proto.RTLSProtocol.Trackable.Acceleration.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RTLSProtocol.Trackable.AngularVelocity.prototype.toObject = function(opt_includeInstance) {
  return proto.RTLSProtocol.Trackable.AngularVelocity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RTLSProtocol.Trackable.AngularVelocity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RTLSProtocol.Trackable.AngularVelocity.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RTLSProtocol.Trackable.AngularVelocity}
 */
proto.RTLSProtocol.Trackable.AngularVelocity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RTLSProtocol.Trackable.AngularVelocity;
  return proto.RTLSProtocol.Trackable.AngularVelocity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RTLSProtocol.Trackable.AngularVelocity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RTLSProtocol.Trackable.AngularVelocity}
 */
proto.RTLSProtocol.Trackable.AngularVelocity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RTLSProtocol.Trackable.AngularVelocity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RTLSProtocol.Trackable.AngularVelocity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RTLSProtocol.Trackable.AngularVelocity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RTLSProtocol.Trackable.AngularVelocity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.RTLSProtocol.Trackable.AngularVelocity.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RTLSProtocol.Trackable.AngularVelocity} returns this
 */
proto.RTLSProtocol.Trackable.AngularVelocity.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.RTLSProtocol.Trackable.AngularVelocity.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RTLSProtocol.Trackable.AngularVelocity} returns this
 */
proto.RTLSProtocol.Trackable.AngularVelocity.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float z = 3;
 * @return {number}
 */
proto.RTLSProtocol.Trackable.AngularVelocity.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RTLSProtocol.Trackable.AngularVelocity} returns this
 */
proto.RTLSProtocol.Trackable.AngularVelocity.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RTLSProtocol.Trackable.AngularAcceleration.prototype.toObject = function(opt_includeInstance) {
  return proto.RTLSProtocol.Trackable.AngularAcceleration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RTLSProtocol.Trackable.AngularAcceleration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RTLSProtocol.Trackable.AngularAcceleration.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RTLSProtocol.Trackable.AngularAcceleration}
 */
proto.RTLSProtocol.Trackable.AngularAcceleration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RTLSProtocol.Trackable.AngularAcceleration;
  return proto.RTLSProtocol.Trackable.AngularAcceleration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RTLSProtocol.Trackable.AngularAcceleration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RTLSProtocol.Trackable.AngularAcceleration}
 */
proto.RTLSProtocol.Trackable.AngularAcceleration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RTLSProtocol.Trackable.AngularAcceleration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RTLSProtocol.Trackable.AngularAcceleration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RTLSProtocol.Trackable.AngularAcceleration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RTLSProtocol.Trackable.AngularAcceleration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.RTLSProtocol.Trackable.AngularAcceleration.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RTLSProtocol.Trackable.AngularAcceleration} returns this
 */
proto.RTLSProtocol.Trackable.AngularAcceleration.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.RTLSProtocol.Trackable.AngularAcceleration.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RTLSProtocol.Trackable.AngularAcceleration} returns this
 */
proto.RTLSProtocol.Trackable.AngularAcceleration.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float z = 3;
 * @return {number}
 */
proto.RTLSProtocol.Trackable.AngularAcceleration.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.RTLSProtocol.Trackable.AngularAcceleration} returns this
 */
proto.RTLSProtocol.Trackable.AngularAcceleration.prototype.setZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.RTLSProtocol.Trackable.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.RTLSProtocol.Trackable} returns this
 */
proto.RTLSProtocol.Trackable.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes cuid = 2;
 * @return {!(string|Uint8Array)}
 */
proto.RTLSProtocol.Trackable.prototype.getCuid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes cuid = 2;
 * This is a type-conversion wrapper around `getCuid()`
 * @return {string}
 */
proto.RTLSProtocol.Trackable.prototype.getCuid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCuid()));
};


/**
 * optional bytes cuid = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCuid()`
 * @return {!Uint8Array}
 */
proto.RTLSProtocol.Trackable.prototype.getCuid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCuid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.RTLSProtocol.Trackable} returns this
 */
proto.RTLSProtocol.Trackable.prototype.setCuid = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.RTLSProtocol.Trackable.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.RTLSProtocol.Trackable} returns this
 */
proto.RTLSProtocol.Trackable.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 frame_ID = 10;
 * @return {number}
 */
proto.RTLSProtocol.Trackable.prototype.getFrameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.RTLSProtocol.Trackable} returns this
 */
proto.RTLSProtocol.Trackable.prototype.setFrameId = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint64 timestamp = 11;
 * @return {number}
 */
proto.RTLSProtocol.Trackable.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.RTLSProtocol.Trackable} returns this
 */
proto.RTLSProtocol.Trackable.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional bytes context = 12;
 * @return {!(string|Uint8Array)}
 */
proto.RTLSProtocol.Trackable.prototype.getContext = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes context = 12;
 * This is a type-conversion wrapper around `getContext()`
 * @return {string}
 */
proto.RTLSProtocol.Trackable.prototype.getContext_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContext()));
};


/**
 * optional bytes context = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContext()`
 * @return {!Uint8Array}
 */
proto.RTLSProtocol.Trackable.prototype.getContext_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContext()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.RTLSProtocol.Trackable} returns this
 */
proto.RTLSProtocol.Trackable.prototype.setContext = function(value) {
  return jspb.Message.setProto3BytesField(this, 12, value);
};


/**
 * repeated Trackable children = 13;
 * @return {!Array<!proto.RTLSProtocol.Trackable>}
 */
proto.RTLSProtocol.Trackable.prototype.getChildrenList = function() {
  return /** @type{!Array<!proto.RTLSProtocol.Trackable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RTLSProtocol.Trackable, 13));
};


/**
 * @param {!Array<!proto.RTLSProtocol.Trackable>} value
 * @return {!proto.RTLSProtocol.Trackable} returns this
*/
proto.RTLSProtocol.Trackable.prototype.setChildrenList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.RTLSProtocol.Trackable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RTLSProtocol.Trackable}
 */
proto.RTLSProtocol.Trackable.prototype.addChildren = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.RTLSProtocol.Trackable, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.RTLSProtocol.Trackable} returns this
 */
proto.RTLSProtocol.Trackable.prototype.clearChildrenList = function() {
  return this.setChildrenList([]);
};


/**
 * optional Position position = 4;
 * @return {?proto.RTLSProtocol.Trackable.Position}
 */
proto.RTLSProtocol.Trackable.prototype.getPosition = function() {
  return /** @type{?proto.RTLSProtocol.Trackable.Position} */ (
    jspb.Message.getWrapperField(this, proto.RTLSProtocol.Trackable.Position, 4));
};


/**
 * @param {?proto.RTLSProtocol.Trackable.Position|undefined} value
 * @return {!proto.RTLSProtocol.Trackable} returns this
*/
proto.RTLSProtocol.Trackable.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RTLSProtocol.Trackable} returns this
 */
proto.RTLSProtocol.Trackable.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RTLSProtocol.Trackable.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Orientation orientation = 5;
 * @return {?proto.RTLSProtocol.Trackable.Orientation}
 */
proto.RTLSProtocol.Trackable.prototype.getOrientation = function() {
  return /** @type{?proto.RTLSProtocol.Trackable.Orientation} */ (
    jspb.Message.getWrapperField(this, proto.RTLSProtocol.Trackable.Orientation, 5));
};


/**
 * @param {?proto.RTLSProtocol.Trackable.Orientation|undefined} value
 * @return {!proto.RTLSProtocol.Trackable} returns this
*/
proto.RTLSProtocol.Trackable.prototype.setOrientation = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RTLSProtocol.Trackable} returns this
 */
proto.RTLSProtocol.Trackable.prototype.clearOrientation = function() {
  return this.setOrientation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RTLSProtocol.Trackable.prototype.hasOrientation = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Velocity velocity = 6;
 * @return {?proto.RTLSProtocol.Trackable.Velocity}
 */
proto.RTLSProtocol.Trackable.prototype.getVelocity = function() {
  return /** @type{?proto.RTLSProtocol.Trackable.Velocity} */ (
    jspb.Message.getWrapperField(this, proto.RTLSProtocol.Trackable.Velocity, 6));
};


/**
 * @param {?proto.RTLSProtocol.Trackable.Velocity|undefined} value
 * @return {!proto.RTLSProtocol.Trackable} returns this
*/
proto.RTLSProtocol.Trackable.prototype.setVelocity = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RTLSProtocol.Trackable} returns this
 */
proto.RTLSProtocol.Trackable.prototype.clearVelocity = function() {
  return this.setVelocity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RTLSProtocol.Trackable.prototype.hasVelocity = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Acceleration acceleration = 7;
 * @return {?proto.RTLSProtocol.Trackable.Acceleration}
 */
proto.RTLSProtocol.Trackable.prototype.getAcceleration = function() {
  return /** @type{?proto.RTLSProtocol.Trackable.Acceleration} */ (
    jspb.Message.getWrapperField(this, proto.RTLSProtocol.Trackable.Acceleration, 7));
};


/**
 * @param {?proto.RTLSProtocol.Trackable.Acceleration|undefined} value
 * @return {!proto.RTLSProtocol.Trackable} returns this
*/
proto.RTLSProtocol.Trackable.prototype.setAcceleration = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RTLSProtocol.Trackable} returns this
 */
proto.RTLSProtocol.Trackable.prototype.clearAcceleration = function() {
  return this.setAcceleration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RTLSProtocol.Trackable.prototype.hasAcceleration = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional AngularVelocity angular_velocity = 8;
 * @return {?proto.RTLSProtocol.Trackable.AngularVelocity}
 */
proto.RTLSProtocol.Trackable.prototype.getAngularVelocity = function() {
  return /** @type{?proto.RTLSProtocol.Trackable.AngularVelocity} */ (
    jspb.Message.getWrapperField(this, proto.RTLSProtocol.Trackable.AngularVelocity, 8));
};


/**
 * @param {?proto.RTLSProtocol.Trackable.AngularVelocity|undefined} value
 * @return {!proto.RTLSProtocol.Trackable} returns this
*/
proto.RTLSProtocol.Trackable.prototype.setAngularVelocity = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RTLSProtocol.Trackable} returns this
 */
proto.RTLSProtocol.Trackable.prototype.clearAngularVelocity = function() {
  return this.setAngularVelocity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RTLSProtocol.Trackable.prototype.hasAngularVelocity = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional AngularAcceleration angular_acceleration = 9;
 * @return {?proto.RTLSProtocol.Trackable.AngularAcceleration}
 */
proto.RTLSProtocol.Trackable.prototype.getAngularAcceleration = function() {
  return /** @type{?proto.RTLSProtocol.Trackable.AngularAcceleration} */ (
    jspb.Message.getWrapperField(this, proto.RTLSProtocol.Trackable.AngularAcceleration, 9));
};


/**
 * @param {?proto.RTLSProtocol.Trackable.AngularAcceleration|undefined} value
 * @return {!proto.RTLSProtocol.Trackable} returns this
*/
proto.RTLSProtocol.Trackable.prototype.setAngularAcceleration = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.RTLSProtocol.Trackable} returns this
 */
proto.RTLSProtocol.Trackable.prototype.clearAngularAcceleration = function() {
  return this.setAngularAcceleration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RTLSProtocol.Trackable.prototype.hasAngularAcceleration = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.RTLSProtocol.TrackableFrame.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RTLSProtocol.TrackableFrame.prototype.toObject = function(opt_includeInstance) {
  return proto.RTLSProtocol.TrackableFrame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RTLSProtocol.TrackableFrame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RTLSProtocol.TrackableFrame.toObject = function(includeInstance, msg) {
  var f, obj = {
    frameId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    trackablesList: jspb.Message.toObjectList(msg.getTrackablesList(),
    proto.RTLSProtocol.Trackable.toObject, includeInstance),
    context: msg.getContext_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RTLSProtocol.TrackableFrame}
 */
proto.RTLSProtocol.TrackableFrame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RTLSProtocol.TrackableFrame;
  return proto.RTLSProtocol.TrackableFrame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RTLSProtocol.TrackableFrame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RTLSProtocol.TrackableFrame}
 */
proto.RTLSProtocol.TrackableFrame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFrameId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = new proto.RTLSProtocol.Trackable;
      reader.readMessage(value,proto.RTLSProtocol.Trackable.deserializeBinaryFromReader);
      msg.addTrackables(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RTLSProtocol.TrackableFrame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RTLSProtocol.TrackableFrame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RTLSProtocol.TrackableFrame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RTLSProtocol.TrackableFrame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrameId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTrackablesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.RTLSProtocol.Trackable.serializeBinaryToWriter
    );
  }
  f = message.getContext_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional uint64 frame_ID = 1;
 * @return {number}
 */
proto.RTLSProtocol.TrackableFrame.prototype.getFrameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.RTLSProtocol.TrackableFrame} returns this
 */
proto.RTLSProtocol.TrackableFrame.prototype.setFrameId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 timestamp = 2;
 * @return {number}
 */
proto.RTLSProtocol.TrackableFrame.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.RTLSProtocol.TrackableFrame} returns this
 */
proto.RTLSProtocol.TrackableFrame.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated Trackable trackables = 3;
 * @return {!Array<!proto.RTLSProtocol.Trackable>}
 */
proto.RTLSProtocol.TrackableFrame.prototype.getTrackablesList = function() {
  return /** @type{!Array<!proto.RTLSProtocol.Trackable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RTLSProtocol.Trackable, 3));
};


/**
 * @param {!Array<!proto.RTLSProtocol.Trackable>} value
 * @return {!proto.RTLSProtocol.TrackableFrame} returns this
*/
proto.RTLSProtocol.TrackableFrame.prototype.setTrackablesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.RTLSProtocol.Trackable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RTLSProtocol.Trackable}
 */
proto.RTLSProtocol.TrackableFrame.prototype.addTrackables = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.RTLSProtocol.Trackable, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.RTLSProtocol.TrackableFrame} returns this
 */
proto.RTLSProtocol.TrackableFrame.prototype.clearTrackablesList = function() {
  return this.setTrackablesList([]);
};


/**
 * optional bytes context = 4;
 * @return {!(string|Uint8Array)}
 */
proto.RTLSProtocol.TrackableFrame.prototype.getContext = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes context = 4;
 * This is a type-conversion wrapper around `getContext()`
 * @return {string}
 */
proto.RTLSProtocol.TrackableFrame.prototype.getContext_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContext()));
};


/**
 * optional bytes context = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContext()`
 * @return {!Uint8Array}
 */
proto.RTLSProtocol.TrackableFrame.prototype.getContext_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContext()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.RTLSProtocol.TrackableFrame} returns this
 */
proto.RTLSProtocol.TrackableFrame.prototype.setContext = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


goog.object.extend(exports, proto.RTLSProtocol);
